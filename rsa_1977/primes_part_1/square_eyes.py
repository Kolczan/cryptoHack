from Crypto.Util.number import long_to_bytes
N = 535860808044009550029177135708168016201451343147313565371014459027743491739422885443084705720731409713775527993719682583669164873806842043288439828071789970694759080842162253955259590552283047728782812946845160334801782088068154453021936721710269050985805054692096738777321796153384024897615594493453068138341203673749514094546000253631902991617197847584519694152122765406982133526594928685232381934742152195861380221224370858128736975959176861651044370378539093990198336298572944512738570839396588590096813217791191895941380464803377602779240663133834952329316862399581950590588006371221334128215409197603236942597674756728212232134056562716399155080108881105952768189193728827484667349378091100068224404684701674782399200373192433062767622841264055426035349769018117299620554803902490432339600566432246795818167460916180647394169157647245603555692735630862148715428791242764799469896924753470539857080767170052783918273180304835318388177089674231640910337743789750979216202573226794240332797892868276309400253925932223895530714169648116569013581643192341931800785254715083294526325980247219218364118877864892068185905587410977152737936310734712276956663192182487672474651103240004173381041237906849437490609652395748868434296753449
e = 65537
ciphertext = 222502885974182429500948389840563415291534726891354573907329512556439632810921927905220486727807436668035929302442754225952786602492250448020341217733646472982286222338860566076161977786095675944552232391481278782019346283900959677167026636830252067048759720251671811058647569724495547940966885025629807079171218371644528053562232396674283745310132242492367274184667845174514466834132589971388067076980563188513333661165819462428837210575342101036356974189393390097403614434491507672459254969638032776897417674577487775755539964915035731988499983726435005007850876000232292458554577437739427313453671492956668188219600633325930981748162455965093222648173134777571527681591366164711307355510889316052064146089646772869610726671696699221157985834325663661400034831442431209123478778078255846830522226390964119818784903330200488705212765569163495571851459355520398928214206285080883954881888668509262455490889283862560453598662919522224935145694435885396500780651530829377030371611921181207362217397805303962112100190783763061909945889717878397740711340114311597934724670601992737526668932871436226135393872881664511222789565256059138002651403875484920711316522536260604255269532161594824301047729082877262812899724246757871448545439896

# zadanie analogiczne jak dwa poprzednie
# czyli zmienia się sposób obliczenia totient
# tym razem `p` i `q` są równe sobie, w tamtym zadaniu nie było `p` i `q` tylko odrazu `N` jako liczba pierwsza

# dajmy liczbe 16 (p=q=4) jej totient to 8
# ogólnie sprawdzę kwadraty
# 2:  1
# 4:  2
# 16: 8
# 25: 20
# 36: 12
# 49: 42
# 64: 32
# 81: 54
# 100: 40
# 256: 128 // zauważam ze dla poteg dwójki totien z n to n/2
# 512: 256 // ale to mi nic nie daje bo N się kończy na 9 xd

# dobra jak zobaczyłem flagę w jakimś solve "root is faster than factoring" to pomyślałem tak
# ogólnie to `totient(m*n)=totient(m)*totient(n)`
# moze jak wezme sqrt(N) i jego totient do kwadratu?

import math
# print(math.sqrt(N)) # OverflowError: int too large to convert to float
# zainstalowałem gmpy
# import gmpy2
# n = gmpy2.mpz(N)
# gmpy2.get_context().precision=2048
# square_root = gmpy2.sqrt(n)
# print(square_root)
# policzyłem, wyszło no i w sumie co z tego xd to tak wielka liczba ze nie wsadze tego w totient

from Crypto.Util.number import *
import math
p = math.isqrt(N) # p=q

# dobra biorę zależność na Euler totient, ze tak jest
# TOCJENT: jesli p jest prime i k>1 to: phi(p^k)= p^(k-1)*(p-1)=p^k*(1-1/p) == (dla k=2 k-1 =1) == p^1 * (p-1) = p*(p-1)
totient = p*(p-1) # czyli jezeli jakaś liczba N jest kwadratem jakiejś liczby p, to wtedy totient(N) = p*(p-1) : N : p^2=N ==> totient(N)=p*(p-1)

d = pow(e, -1, totient) # klucz prywatny
plaintext = pow(ciphertext, d, N)

bytes_plaintext = long_to_bytes(plaintext)
print(bytes_plaintext)